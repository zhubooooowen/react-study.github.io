{"version":3,"sources":["pages/Counter/counterSlice.ts","pages/OrderManage/orderSlice.ts","router.ts","components/Navbar/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","searchParams","order_no","create_time","moment","order_date","pagination","current","pageSize","total","tableData","address","orderSlice","updateSearchParams","updatePagination","updateTableData","selectOrderData","order","router","title","path","component","React","lazy","withRouter","selectedKeys","hash","window","location","substr","routerList","forEach","item","i","includes","toString","style","width","defaultSelectedKeys","mode","map","Item","to","routeArr","titleList","split","id","className","HomeOutlined","fallback","active","setRoute","arr","children","push","exact","from","store","configureStore","reducer","counterReducer","orderReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","locale","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51b40e02.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport moment from 'moment'\r\n\r\ninterface OrderManageState {\r\n  searchParams: any;\r\n  pagination: any;\r\n  tableData: any;\r\n}\r\n\r\nconst initialState: OrderManageState = {\r\n  searchParams: {\r\n    order_no: 1234, create_time: moment(), order_date: [moment(), moment()]\r\n  },\r\n  pagination: {\r\n    current: 1,\r\n    pageSize: 3,\r\n    total: 0\r\n  },\r\n  tableData: [\r\n    {\r\n      order_no: 123,\r\n      create_time: '2020-12-12',\r\n      order_date: '2020-12-12 ~ 2020-12-20',\r\n      address: '华龙苑南里'\r\n    },\r\n    {\r\n      order_no: 234,\r\n      create_time: '2020-12-12',\r\n      order_date: '2020-12-12 ~ 2020-12-20',\r\n      address: '华龙苑南里'\r\n    },\r\n    {\r\n      order_no: 345,\r\n      create_time: '2020-12-12',\r\n      order_date: '2020-12-12 ~ 2020-12-20',\r\n      address: '华龙苑南里'\r\n    },\r\n    {\r\n      order_no: 456,\r\n      create_time: '2020-12-12',\r\n      order_date: '2020-12-12 ~ 2020-12-20',\r\n      address: '华龙苑南里'\r\n    },\r\n    {\r\n      order_no: 567,\r\n      create_time: '2020-12-12',\r\n      order_date: '2020-12-12 ~ 2020-12-20',\r\n      address: '华龙苑南里'\r\n    }\r\n  ]\r\n};\r\n\r\nexport const orderSlice = createSlice({\r\n  name: 'orderManage',\r\n  initialState,\r\n  reducers: {\r\n    updateSearchParams: (state, action: PayloadAction<any>) => {\r\n      state.searchParams = action.payload\r\n    },\r\n    updatePagination: (state, action: PayloadAction<any>) => {\r\n      state.pagination = action.payload\r\n    },\r\n    updateTableData: (state, action: PayloadAction<any>) => {\r\n      state.tableData = action.payload\r\n    },\r\n  },\r\n});\r\n\r\nexport const { updateSearchParams, updatePagination, updateTableData } = orderSlice.actions;\r\n\r\nexport const selectOrderData = (state: RootState) => state.order;\r\n\r\nexport default orderSlice.reducer;\r\n","import React from 'react';\n\n\nconst router =  [\n  {\n    title: '首页',\n    path: '/counter',\n    component: React.lazy(() => import('./pages/Counter/Counter'))\n  },\n  {\n    title: '订单管理',\n    path: '/order',\n    component: React.lazy(() => import('./pages/OrderManage'))\n  },\n  {\n    title: '表格拖拽',\n    path: '/dragTable',\n    component: React.lazy(() => import('./pages/DragTable'))\n  },\n  {\n    title: '进度条',\n    path: '/progress',\n    component: React.lazy(() => import('./pages/Progress'))\n  },\n  {\n    title: '栅格',\n    path: '/grid',\n    component: React.lazy(() => import('./pages/Grid'))\n  },\n  {\n    title: '分页',\n    path: '/pagination',\n    component: React.lazy(() => import('./pages/Pagination'))\n  }\n]\n\nexport default router\n","import React from \"react\";\nimport \"./index.less\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { Menu } from \"antd\";\nimport routerList from \"../../router\";\n\nconst Navbar: React.FC = () => {\n\n  let selectedKeys = \"0\";\n  const hash = window.location.hash.substr(1);\n  routerList.forEach((item: any, i: number) => {\n    if (hash.includes(item.path)) {\n      selectedKeys = i.toString();\n    }\n  });\n  return (\n    <Menu\n      style={{ width: 256 }}\n      defaultSelectedKeys={[selectedKeys]}\n      selectedKeys={[selectedKeys]}\n      mode=\"inline\"\n    >\n      {routerList.map((item: any, i: number) => (\n        <Menu.Item key={`${i}`}>\n          <Link to={item.path}>{item.title}</Link>\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n}\n\n// withRouter 使组件的 props 里加入 history location match 属性\nexport default withRouter(Navbar);\n","import React, { Suspense } from 'react';\r\nimport './App.less';\r\n// HashRouter 打包 不能用 BrowserRouter\r\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\r\nimport { Breadcrumb, Skeleton } from \"antd\";\r\nimport {\r\n  HomeOutlined\r\n} from '@ant-design/icons';\r\nimport routerList from \"./router\";\r\nimport Navbar from \"@components/Navbar\";\r\n\r\ninterface Irouter {\r\n  title?: string,\r\n  path: string,\r\n  component: any,\r\n  icon?: string,\r\n  children?: Irouter[]\r\n}\r\n\r\nconst routeArr: any[] = []\r\n\r\nconst App: React.FC = () => {\r\n\r\n  // 把 routerList 的每一项和每一项的 children 都注册到路由上\r\n  const setRoute = (arr: Irouter[]): any[] => {\r\n    arr.forEach(item => {\r\n      // 递归处理\r\n      // Switch 总是渲染第一个匹配到的组件 所以把子组件路由放到前面\r\n      // home/about 可以匹配到 /home 和 /home/about\r\n      // 如果 <Route path=\"/home\" component={Home} /> 在上 点击 home/about 就直接匹配了 Home 组件\r\n      // 如果我们在每个路由上都添加 exact 那么它们的顺序可以随意调整\r\n      if (item.children) {\r\n        setRoute(item.children);\r\n      }\r\n      routeArr.push(\r\n        <Route\r\n          key={item.path}\r\n          exact // 精确匹配\r\n          path={item.path}\r\n          component={item.component}\r\n        />\r\n      );\r\n    });\r\n    return routeArr;\r\n  }\r\n\r\n  const hash = window.location.hash.substr(2);\r\n  let titleList = hash.split(\"/\");\r\n  routerList.forEach(item => {\r\n    if (item.path.substr(1) === titleList[0]) {\r\n      titleList[0] = item.title;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div id=\"app\">\r\n      <div className=\"title\">\r\n        <span>\r\n          React Study\r\n        </span>\r\n      </div>\r\n      <div className=\"app\">\r\n        <Navbar />\r\n        <div className=\"content\">\r\n          <Breadcrumb>\r\n            <Breadcrumb.Item>\r\n              <HomeOutlined />\r\n            </Breadcrumb.Item>\r\n            <Breadcrumb.Item>{titleList[0]}</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <Suspense fallback={<Skeleton active />}>\r\n            <Switch>\r\n              {setRoute(routerList)}\r\n              <Redirect from=\"/\" to=\"/counter\" />\r\n            </Switch>\r\n          </Suspense>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../pages/Counter/counterSlice';\r\nimport orderReducer from '../pages/OrderManage/orderSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    order: orderReducer\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport './index.less';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ConfigProvider } from 'antd';\r\nimport 'moment/locale/zh-cn';\r\nimport locale from 'antd/lib/locale/zh_CN';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ConfigProvider locale={locale}>\r\n        <Router>\r\n          <App />\r\n        </Router>\r\n      </ConfigProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}